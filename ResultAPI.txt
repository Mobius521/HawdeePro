对接
下面是针对你提供的 CourseController 类生成的 接口文档，采用标准 RESTful API 文档格式，适用于 Swagger、Postman 等工具，也方便前端开发者调用。

🎓 课程管理模块接口文档（CourseController）
●基础路径（Base Path）：/course
●说明：提供课程的增删改查操作，支持按教师编号查询课程等功能。

1. 🟢 添加课程
●URL：/course/add
●请求方式：POST
●请求体类型：application/json
●请求参数（Request Body）：

{
  "courseName": "叽里咕噜",
  "teacherId": "T123",
  "time": "周一第1-2节",
  "evaluation": "优秀",
  "classroom": "教室A101"
}

●响应数据（Response）：

{
  "code": 0,
  "message": "操作成功",
  "data": "添加成功"
}

●说明：添加一门新的课程，courseId 可由前端生成或数据库自动生成（根据设计而定）。

2. 🟡 修改课程
●URL：/course/update
●请求方式：PUT
●请求体类型：application/json
●请求参数（Request Body）：（不用都填入）

{
  "courseId": "C001",
  "courseName": "叽里咕噜",
  "teacherId": "T123",
  "time": "周二第3-4节",
  "evaluation": "良好",
  "classroom": "教室B202"
}

●响应数据：

{
  "code": 0,
  "message": "操作成功",
  "data": "修改成功"
}

●说明：修改已有课程的信息，courseId 必须存在。

3. 🔴 删除课程
●URL：/course/delete/{id}
●请求方式：DELETE
●路径参数：
参数名	类型	说明
id	String	要删除的课程ID
●示例：/course/delete/C001
●响应数据：

{
  "code": 0,
  "message": "操作成功",
  "data": "删除成功"
}

●说明：根据课程编号删除课程。

4. 🔍 根据课程编号获取课程信息
●URL：/course/get/{id}
●请求方式：GET
●路径参数：
参数名	类型	说明
id	String	课程编号
●示例：/course/get/C001
●响应数据：

{
  "code": 0,
  "message": "操作成功",
  "data": {
    "courseId": "C001",
    "courseName": "叽里咕噜",
    "teacherId": "T123",
    "time": "周一第1-2节",
    "evaluation": "优秀",
    "classroom": "教室A101"
  }
}

●说明：根据课程编号精确查询课程详情。

5. 📋 查询所有课程
●URL：/course/list
●请求方式：GET
●响应数据：

{
  "code": 0,
  "message": "操作成功",
  "data": [
    {
      "courseId": "C001",
      "courseName": "叽里咕噜",
      "teacherId": "T123",
      "time": "周一第1-2节",
      "evaluation": "优秀",
      "classroom": "教室A101"
    },
    {
      "courseId": "C002",
      "courseName": "叽里咕噜",
      "teacherId": "T124",
      "time": "周三第5-6节",
      "evaluation": "良好",
      "classroom": "教室B202"
    }
  ]
}

●说明：返回系统中所有课程的完整信息列表。

6. 👨‍🏫 根据教师编号查询课程
●URL：/course/teacher/{teacherId}
●请求方式：GET
●路径参数：
参数名	类型	说明
teacherId	String	教师编号
●示例：/course/teacher/T123
●响应数据：

{
  "code": 0,
  "message": "操作成功",
  "data": [
    {
      "courseId": "C001",
      "courseName": "叽里咕噜",
      "teacherId": "T123",
      "subjectId": "S001",
      "time": "周一第1-2节",
      "evaluation": "优秀",
      "classroom": "教室A101"
    }
  ]
}

●说明：返回指定教师教授的所有课程列表。

📦 错误响应示例

{
  "code": 1,
  "message": "添加失败",
  "data": null
}

●code=1 表示操作失败，message 返回失败原因。

📘 补充说明
●所有接口返回统一格式：Result<T>，包含：
○code: 0 成功，1 失败
○message: 操作提示语
○data: 具体返回的数据对象或字符串
●参数校验建议在 Service 层或通过注解（如 @Valid）进行扩展。

是否还需要我帮你生成 Swagger 注解版本 或 前端调用示例？












以下是你提供的 OperationLogController 类对应的详细 接口文档，适用于后端接口说明、前端对接、Swagger/OpenAPI 生成等场景。

🧾 操作日志管理模块接口文档（OperationLogController）
●基础路径（Base Path）：/log
●模块说明：提供对系统操作日志的查看、统计和添加功能，支持手动测试插入日志。

1. 📋 查看所有操作日志
●URL：/log/list
●请求方式：GET
●请求参数：无
●响应示例：

{
  "code": 0,
  "message": "操作成功",
  "data": [
    {
      "logId": "123e4567-e89b-12d3-a456-426614174000",
      "staffId": "S1001",
      "operationTime": "2025-06-29T10:10:00.000+08:00",
      "operationContent": "添加课程信息"
    },
    {
      "logId": "223e4567-e89b-12d3-a456-426614174001",
      "staffId": "S1002",
      "operationTime": "2025-06-29T10:15:00.000+08:00",
      "operationContent": "删除学生数据"
    }
  ]
}

●说明：返回系统中所有操作日志，按时间或记录顺序排列（排序逻辑可在 Service 实现中处理）。

2. 🔢 获取日志总数
●URL：/log/count
●请求方式：GET
●请求参数：无
●响应示例：

{
  "code": 0,
  "message": "操作成功",
  "data": 152
}

●说明：返回当前系统中操作日志的总条数，常用于仪表盘统计。

3. 📝 新增操作日志（测试或手动记录）
●URL：/log/add
●请求方式：POST
●请求体类型：application/json
●请求参数（Request Body）：

{
  "staffId": "S1001",
  "operationContent": "操作内容"
}

●⚠️ logId 和 operationTime 会在后台自动生成，无需前端传递。
●响应示例：

{
  "code": 0,
  "message": "操作成功",
  "data": "添加成功"
}

●说明：适合在前端页面或系统测试过程中主动调用，记录某些操作行为。

✅ 实体类说明：OperationLog
字段名	类型	描述
logId	String	日志主键，UUID生成
staffId	String	操作人员编号
operationTime	Date	操作发生时间（系统生成）
operationContent	String	操作内容描述

📦 统一响应格式说明（Result）
所有接口返回如下格式：

{
  "code": 0,              // 0表示成功，1表示失败
  "message": "操作成功",   // 提示信息
  "data": ...             // 实际返回的数据对象或信息
}



如果你还需要我 加上 Swagger 注解版本 或 分页查询版本，可以继续告诉我。






以下是你提供的 ResourceController 类的完整接口文档，采用标准 RESTful 接口说明格式，涵盖了资源的展示、上传、下载、检索、删除和分享等功能，适合前后端联调或接入 Swagger 文档工具。




🧾 教师认证与信息接口文档
🟩 1. 登录接口
●接口地址：/auth/login
●请求方式：POST
●请求参数：
参数名	类型	是否必填	描述
username	String	是	用户名（系统为 staff_id 或用户名）
password	String	是	密码（明文密码，后端校验）
●响应示例（成功）：
json
复制编辑
{"code": 200,"msg": "登录成功","data": "{token=xxx.yyy.zzz, userInfo={id=1001, name=张老师, role=teacher}}"}
●响应字段说明：
字段	类型	描述
code	int	响应状态码（200成功，400失败）
msg	String	提示信息
data	String	包含 JWT 令牌和用户信息（字符串形式，建议改为 Map<String,Object>）
●备注：
○当前代码写死了账号密码（admin 和 123456），建议从请求参数中获取；
○建议将 Result<String> 改为 Result<Map<String, Object>> 更利于前端解析。

🟦 2. 注销接口
●接口地址：/auth/logout
●请求方式：POST
●请求头：
参数名	示例值	是否必填	描述
Authorization	Bearer xxx.yyy.zzz	是	用户 JWT 令牌
●响应示例：
json
复制编辑
{"code": 200,"msg": "操作成功","data": ""}
●说明：
○注销操作是服务端标记 token 失效（如将 token 存入黑名单或不做处理，仅前端删除），当前代码调用 jwtUtil.invalidateToken(userId)；
○若你未实现黑名单机制，token 实际不会被服务端主动失效处理。

🟨 3. 根据 staff_id 获取教师姓名
●接口地址：/auth/getname/{staff_id}
●请求方式：GET
●路径参数：
参数名	类型	是否必填	描述
staff_id	String	是	教师工号
●响应示例：
json
复制编辑
{"code": 200,"msg": "操作成功","data": "张老师"}
●说明：
○查询教师姓名，调用 TeacherMapper.getname(staff_id)；
○若未查到应返回空字符串或提示信息。


📚 课程资源管理模块接口文档（ResourceController）
●基础路径（Base Path）：/resource
●模块说明：管理教师上传的课程资源，支持文件元信息的存储、资源展示、模糊检索、分享等功能。实际资源存储于阿里云或其他对象存储平台。

1. 📂 获取教师上传的所有资源
●URL：/resource/list/{teacherId}
●请求方式：GET
●路径参数：
参数名	类型	描述
teacherId	String	教师的唯一编号
●响应示例：

{
  "code": 0,
  "message": "操作成功",
  "data": [
    {
      "resourceId": "abc123",
      "teacherId": "T001",
      "resourceType": "文档",
      "resourceUrl": "https://oss.aliyun.com/resource/abc123.pdf",
      "uploadTime": "2025-06-29T10:30:00"
    }
  ]
}


2. 🔍 资源检索（模糊搜索）
●URL：/resource/search
●请求方式：GET
●请求参数：
参数名	类型	是否必填	描述
keyword	String	是	搜索关键字
teacherId	String	是	教师编号
●示例：/resource/search?keyword=英语&teacherId=T001
●响应示例：

{
  "code": 0,
  "message": "操作成功",
  "data": [
    {
      "resourceId": "res456",
      "teacherId": "T001",
      "resourceType": "视频",
      "resourceUrl": "https://oss.aliyun.com/resource/video.mp4",
      "uploadTime": "2025-06-29T11:00:00"
    }
  ]
}


3. ⬆️ 上传资源（元信息记录）
●URL：/resource/upload
●请求方式：POST
●请求体类型：application/json
●请求体参数（仅提交资源元数据，文件由前端上传到 OSS）：

{
  "teacherId": "T001",
  "resourceType": "文档",
  "resourceUrl": "https://oss.aliyun.com/resource/abc123.pdf",
  "uploadTime": "2025-06-29T10:30:00"
}

⚠️ 注意：
●resourceId 由后端 UUID 生成。
●uploadTime 可由前端传入，也可由后端补全当前时间。
●响应示例：

{
  "code": 0,
  "message": "操作成功",
  "data": "上传成功"
}


4. ⬇️ 下载资源（获取URL）
●URL：/resource/download/{id}
●请求方式：GET
●路径参数：
参数名	类型	描述
id	String	资源编号
●响应示例：

{
  "code": 0,
  "message": "操作成功",
  "data": "https://oss.aliyun.com/resource/abc123.pdf"
}

前端可直接访问该 URL 实现下载或预览功能。

5. 🗑️ 删除资源
●URL：/resource/delete/{id}
●请求方式：DELETE
●路径参数：
参数名	类型	描述
id	String	资源编号
●响应示例：

{
  "code": 0,
  "message": "操作成功",
  "data": "删除成功"
}


6. 🔗 分享资源给其他教师
●URL：/resource/share
●请求方式：POST
●请求参数类型：application/x-www-form-urlencoded
●请求参数：
参数名	类型	是否必填	描述
resourceId	String	是	要分享的资源编号
targetTeacherId	String	是	接收资源的教师编号
●响应示例：

{
  "code": 0,
  "message": "操作成功",
  "data": "分享成功"
}

后端实现可能复制资源记录或更新授权信息，具体取决于系统设计。

✅ 实体类说明：Resource
字段名	类型	描述
resourceId	String	资源唯一编号，UUID 生成
teacherId	String	所属教师编号
resourceType	String	类型（文档、视频、图片等）
resourceUrl	String	OSS 返回的资源访问链接
uploadTime	LocalDateTime	上传时间

📦 返回统一结构（Result）

{
  "code": 0,             // 0 表示成功，1 表示失败
  "message": "操作成功",  // 或 “上传失败”等错误信息
  "data": "返回的数据"    // 或数组、对象、URL 等
}



需要我帮你生成 Swagger 注解版本？或者你是否使用阿里云 OSS SDK，我可以帮你生成上传代码模板。







🤖 AI 调用模块接口文档（WenxinController）
●基础路径（Base Path）：/wenxin
●模块说明：用于接入 AI 模型（如文心一言），实现聊天或自动生成题目等智能功能。

1. 💬 调用文心一言模型生成内容
●URL：/wenxin/chat
●请求方式：POST
●请求参数类型：application/x-www-form-urlencoded
●请求参数：
参数名	类型	是否必填	描述
message	String	是	用户发送的对话内容、提示词
●示例请求：
bash
复制编辑
POST /wenxin/chat Content-Type: application/x-www-form-urlencoded  message=帮我生成一道初中物理题 
●响应示例：
json
复制编辑
{"code": 0,"message": "操作成功","data": "以下是为你生成的物理题：一个质量为2kg的物体在水平地面上受到10N的恒力作用，求..."}
●

